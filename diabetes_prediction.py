# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dDS2tub-fkIkzKLeB1gNPodqZtCbHDGP
"""



"""Importing the dependenties"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis(PIMA diabetes dataset)"""

#loading the dataset to the panda dataframe
diabetes_ds=pd.read_csv('/content/diabetes.csv')

# printing the first 5 rows of the dataset
diabetes_ds.head()

diabetes_ds.shape

diabetes_ds.describe()

diabetes_ds['Outcome'].value_counts()

X=diabetes_ds.drop(columns='Outcome',axis=1)
Y=diabetes_ds['Outcome']

print(X)

print(Y)

"""DATA STANDARDIZATION"""

scaler=StandardScaler()
scaler.fit(X)
standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diabetes_ds['Outcome']

"""Train test split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""TRAINING THE MODEL"""

classifier = svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

"""MODEL EVALUVATION

ACCURACY
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('accuracy score of training:',training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""INPUT / OUTPUT SYSTEM"""

# Ask for input from user
print("Enter the following values for prediction:")

pregnancies = float(input("Number of Pregnancies: "))
glucose = float(input("Glucose Level: "))
blood_pressure = float(input("Blood Pressure: "))
skin_thickness = float(input("Skin Thickness: "))
insulin = float(input("Insulin Level: "))
bmi = float(input("BMI: "))
dpf = float(input("Diabetes Pedigree Function: "))
age = float(input("Age: "))

# Combine inputs into a tuple reason:(immutable)
input_data = (pregnancies, glucose, blood_pressure, skin_thickness, insulin, bmi, dpf, age)

# Convert to numpy array for fast calculation
input_data_as_numpy_array = np.asarray(input_data)

# Reshape and standardize
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
std_data = scaler.transform(input_data_reshaped)
print(std_data)
# Predict
prediction = classifier.predict(std_data)

# Output
print("\nPrediction result:")
if prediction[0] == 0:
    print("ðŸŸ¢ The person is **NOT diabetic**.")
else:
    print("ðŸ”´ The person **IS diabetic**.")